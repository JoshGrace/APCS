package com.eimacs.lab06;

import java.awt.*;
import java.awt.image.BufferedImage;

/**
 * A class that represents a picture. This class inherits from SimplePicture and
 * allows the student to add functionality to the Picture class.
 *
 * @author Barbara Ericson ericson@cc.gatech.edu
 * @version 2.1 (January 14, 2015) IMACS Curriculum Development Group
 */
public class Picture extends SimplePicture
{
      ///////////////////// constructors //////////////////////////////////

    /**
     * Constructor that takes no arguments
     */
    public Picture()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor 
         */
        super();
    }

    /**
     * Constructor that takes a file name and creates the picture
     *
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        // let the parent class handle this fileName
        super(fileName);
    }

    /**
     * Constructor that takes the width and height
     *
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int width, int height)
    {
        // let the parent class handle this width and height
        super(width, height);
    }

    /**
     * Constructor that takes a picture and creates a copy of that picture
     *
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        // let the parent class do the copy
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     *
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }

      ////////////////////// methods ///////////////////////////////////////
    /**
     * Method to return a string with information about this picture.
     *
     * @return a string with information about the picture such as fileName,
     * height and width.
     */
    public String toString()
    {
        String output = "Picture, filename " + getFileName()
                + " height " + getHeight()
                + " width " + getWidth();
        return output;
    }

    /**
     * Method to set the blue component to 0
     */
    public void zeroBlue()
    {
        Pixel[][] pixels = getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setBlue(0);
            }
        }
    }
    
    

    /**
     * Method that mirrors the left half of a picture onto the
     * right half as though reflecting in a mirror placed on 
     * the vertical center line of the picture
     */
    public void mirrorLeftOntoRight()
    {
        Pixel[][] pixels = getPixels2D();
        Pixel leftPixel, rightPixel;
        int width = pixels[0].length;
        for (int row = 0; row < pixels.length; row++)
        {
            for (int col = 0; col < width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][(width - 1) - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }
    public void mirrorTopOntoBottom()
    {
        Pixel[][] pixels = getPixels2D();
        Pixel rightPixel, leftPixel;
        int width = pixels[0].length;
        for (int row = 0; row < getHeight(); row++)
        {
            for (int col = 0; col < width; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[(getHeight() - 1) - row][col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }
    public void flipLeftAndRight()
    {
    	Pixel[][] pixels = getPixels2D();
		Pixel leftPixel, rightPixel, tempPixel;
		Color leftColor;
		int width = pixels[0].length;
		for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < width / 2; col++) {
				leftPixel = pixels[row][col];
				rightPixel = pixels[row][(width - 1) - col];
				leftColor = leftPixel.getColor(); 
				leftPixel.setColor(rightPixel.getColor());
				rightPixel.setColor(leftColor);
				
            }
        }
    }
    public void negate()
    {
        Pixel[][] pixels = getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setBlue(255-pixelObj.getBlue());
                pixelObj.setRed(255-pixelObj.getRed());
                pixelObj.setGreen(255-pixelObj.getGreen());
            }
        }
    }
    public void grayscale()
    {
    	int average = 0;
        Pixel[][] pixels = getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                /*pixelObj.setBlue((int)(pixelObj.getAverage()));
                pixelObj.setRed((int)(pixelObj.getAverage()));
                pixelObj.setGreen((int)(pixelObj.getAverage()));*/
                average = (int) (.5 + pixelObj.getAverage());
            	pixelObj.setGreen(average);
                pixelObj.setRed(average);
                pixelObj.setBlue( average);
            }
        }
    }
    public void fixUnderwater()
    {
        Pixel[][] pixels = getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setRed(6*pixelObj.getRed());
            }
        }
    }
    public void repairTemple()
    {
        Pixel[][] pixels = getPixels2D();
        Pixel leftPixel, rightPixel;
        int width = pixels[0].length;
        //for (int row = 0; row < pixels.length; row++)
        //for (int row = (int) (.5 + pixels.length/2); row < pixels.length; row++)
        for (int row = 30; row < 95; row++)
        {
            for (int col = 30; col < 284; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][(width - 1) - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        }
    }
    public void cloneSeagull()
    {
        Pixel[][] pixels = getPixels2D();
        Pixel leftPixel, rightPixel;
        int width = pixels[0].length;
        //for (int row = 0; row < pixels.length; row++)
        //for (int row = (int) (.5 + pixels.length/2); row < pixels.length; row++)
        for (int row = 230; row < 350; row++)
        {
            for (int col = 0; col < 260; col++)
            {
                leftPixel = pixels[row][496 - col];
                rightPixel = pixels[20 + row][width - 1 - col];
				rightPixel.setColor(leftPixel.getColor());

            }
        }
    }
    public void edgeDetect(int minColorDistance){
    	Pixel[][] pixels = getPixels2D();
        Pixel bottomPixel, rightPixel, pixel;
        int width = pixels[0].length;
        for (int row = 0; row < pixels.length - 1; row++) {
			for (int col = 0; col < width - 1; col++) {
                pixel = pixels[row][col];
                rightPixel = pixels[row][col + 1];
                bottomPixel = pixels[row + 1][col];
                double distR = Math.pow(pixel.getRed() - rightPixel.getRed(), 2)
                		+ Math.pow(pixel.getBlue() - rightPixel.getBlue(), 2)
                		+ Math.pow(pixel.getGreen() - rightPixel.getGreen(), 2);
                double distB = Math.pow(pixel.getRed() - bottomPixel.getRed(), 2)
                		+ Math.pow(pixel.getBlue() - bottomPixel.getBlue(), 2)
                		+ Math.pow(pixel.getGreen() - bottomPixel.getGreen(), 2);
                if(distR > minColorDistance || distB > minColorDistance){
                	pixel.setColor(Color.BLACK);
                } else {
                	pixel.setColor(Color.WHITE);
                }
				//rightPixel.setColor(leftPixel.getColor());

            }
        }
    }
    public void hideMessage(String[] msgStrings){
    	Picture pic2 = new Picture(getWidth(), getHeight());
    	for ( int i = 0; i < msgStrings.length; i++ ){
      	  pic2.addMessage( msgStrings[ i ], 50, 50 + 30 * i );
    	}
    	Pixel[][] pixels = getPixels2D();
    	Pixel[][] pixels2 = pic2.getPixels2D();
    	for (int row = 0; row < pic2.getHeight() - 1; row++) {
			for (int col = 0; col < pic2.getWidth() - 1; col++) {
				Pixel pic = pixels[row][col];
				if(pic.getRed()%2 != 0){
					pic.setRed(pic.getRed() - 1);
				}
			}
    	}
    }
} // this } is the end of class Picture, put all new methods before this
